=begin
#ShipEngine API

#ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics. Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

The version of the OpenAPI document: 1.1.202006302006
Contact: sales@shipengine.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for ShipEngine::LabelsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'LabelsApi' do
  before do
    # run before each test
    @api_instance = ShipEngine::LabelsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of LabelsApi' do
    it 'should create an instance of LabelsApi' do
      expect(@api_instance).to be_instance_of(ShipEngine::LabelsApi)
    end
  end

  # unit tests for create_label
  # Purchase Label
  # Purchase and print a label for shipment
  # @param create_label_request_body 
  # @param [Hash] opts the optional parameters
  # @return [CreateLabelResponseBody]
  describe 'create_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_label_from_rate
  # Purchase Label with Rate ID
  # When retrieving rates for shipments using the &#x60;/rates&#x60; endpoint, the returned information contains a &#x60;rate_id&#x60; property that can be used to generate a label without having to refill in the shipment information repeatedly. 
  # @param rate_id Rate ID
  # @param create_label_from_rate_request_body 
  # @param [Hash] opts the optional parameters
  # @return [CreateLabelFromRateResponseBody]
  describe 'create_label_from_rate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_label_from_shipment
  # Purchase Label with Shipment ID
  # Purchase a label using a shipment ID that has already been created with the desired address and package info. 
  # @param shipment_id Shipment ID
  # @param create_label_from_shipment_request_body 
  # @param [Hash] opts the optional parameters
  # @return [CreateLabelFromShipmentResponseBody]
  describe 'create_label_from_shipment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_return_label
  # Create a return label
  # Create a return label
  # @param label_id Label ID
  # @param create_return_label_request_body 
  # @param [Hash] opts the optional parameters
  # @return [CreateReturnLabelResponseBody]
  describe 'create_return_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_label_by_external_shipment_id
  # Get Label By External Shipment ID
  # Find a label by using the external shipment id that was used during label creation 
  # @param external_shipment_id 
  # @param [Hash] opts the optional parameters
  # @option opts [LabelDownloadType] :label_download_type 
  # @return [GetLabelByExternalShipmentIdResponseBody]
  describe 'get_label_by_external_shipment_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_label_by_id
  # Get Label By ID
  # Retrieve information for individual labels.
  # @param label_id Label ID
  # @param [Hash] opts the optional parameters
  # @option opts [LabelDownloadType] :label_download_type 
  # @return [GetLabelByIdResponseBody]
  describe 'get_label_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_tracking_log_from_label
  # Get Label Tracking Information
  # Retrieve the label&#39;s tracking information
  # @param label_id Label ID
  # @param [Hash] opts the optional parameters
  # @return [GetTrackingLogFromLabelResponseBody]
  describe 'get_tracking_log_from_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_labels
  # List labels
  # This endpoint returns a list of labels that you&#39;ve [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.  By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both &#x60;warehouse_id&#x60; and &#x60;carrier_id&#x60; 
  # @param [Hash] opts the optional parameters
  # @option opts [LabelStatus] :label_status Only return labels that are currently in the specified status
  # @option opts [String] :service_code Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/)
  # @option opts [String] :carrier_id Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/)
  # @option opts [String] :tracking_number Only return labels with a specific tracking number
  # @option opts [String] :batch_id Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/)
  # @option opts [String] :rate_id Rate ID
  # @option opts [String] :shipment_id Shipment ID
  # @option opts [String] :warehouse_id Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/)
  # @option opts [DateTime] :created_at_start Only return labels that were created on or after a specific date/time
  # @option opts [DateTime] :created_at_end Only return labels that were created on or before a specific date/time
  # @option opts [Integer] :page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned. 
  # @option opts [Integer] :page_size The number of results to return per response.
  # @option opts [SortDir] :sort_dir Controls the sort order of the query.
  # @option opts [String] :sort_by Controls which field the query is sorted by.
  # @return [ListLabelsResponseBody]
  describe 'list_labels test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for void_label
  # Void a Label By ID
  # Void a label by ID to get a refund.
  # @param label_id Label ID
  # @param [Hash] opts the optional parameters
  # @return [VoidLabelResponseBody]
  describe 'void_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
