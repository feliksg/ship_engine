=begin
#ShipEngine API

#ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics. Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

The version of the OpenAPI document: 1.1.202006302006
Contact: sales@shipengine.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module ShipEngine
  class RatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Shipping Rates
    # It's not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don't solely ship things using a single shipping option; so we provide functionality to show you all your options! 
    # @param calculate_rates_request_body [CalculateRatesRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [CalculateRatesResponseBody]
    def calculate_rates(calculate_rates_request_body, opts = {})
      data, _status_code, _headers = calculate_rates_with_http_info(calculate_rates_request_body, opts)
      data
    end

    # Get Shipping Rates
    # It&#39;s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don&#39;t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
    # @param calculate_rates_request_body [CalculateRatesRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CalculateRatesResponseBody, Integer, Hash)>] CalculateRatesResponseBody data, response status code and response headers
    def calculate_rates_with_http_info(calculate_rates_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatesApi.calculate_rates ...'
      end
      # verify the required parameter 'calculate_rates_request_body' is set
      if @api_client.config.client_side_validation && calculate_rates_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'calculate_rates_request_body' when calling RatesApi.calculate_rates"
      end
      # resource path
      local_var_path = '/v1/rates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(calculate_rates_request_body) 

      # return_type
      return_type = opts[:return_type] || 'CalculateRatesResponseBody' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatesApi#calculate_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Bulk Rates
    # Get Bulk Shipment Rates
    # @param compare_bulk_rates_request_body [CompareBulkRatesRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<BulkRate>]
    def compare_bulk_rates(compare_bulk_rates_request_body, opts = {})
      data, _status_code, _headers = compare_bulk_rates_with_http_info(compare_bulk_rates_request_body, opts)
      data
    end

    # Get Bulk Rates
    # Get Bulk Shipment Rates
    # @param compare_bulk_rates_request_body [CompareBulkRatesRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BulkRate>, Integer, Hash)>] Array<BulkRate> data, response status code and response headers
    def compare_bulk_rates_with_http_info(compare_bulk_rates_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatesApi.compare_bulk_rates ...'
      end
      # verify the required parameter 'compare_bulk_rates_request_body' is set
      if @api_client.config.client_side_validation && compare_bulk_rates_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'compare_bulk_rates_request_body' when calling RatesApi.compare_bulk_rates"
      end
      # resource path
      local_var_path = '/v1/rates/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(compare_bulk_rates_request_body) 

      # return_type
      return_type = opts[:return_type] || 'Array<BulkRate>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatesApi#compare_bulk_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Estimate Rates
    # Get Rate Estimates
    # @param estimate_rates_request_body [EstimateRatesRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Rate>]
    def estimate_rates(estimate_rates_request_body, opts = {})
      data, _status_code, _headers = estimate_rates_with_http_info(estimate_rates_request_body, opts)
      data
    end

    # Estimate Rates
    # Get Rate Estimates
    # @param estimate_rates_request_body [EstimateRatesRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Rate>, Integer, Hash)>] Array<Rate> data, response status code and response headers
    def estimate_rates_with_http_info(estimate_rates_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatesApi.estimate_rates ...'
      end
      # verify the required parameter 'estimate_rates_request_body' is set
      if @api_client.config.client_side_validation && estimate_rates_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'estimate_rates_request_body' when calling RatesApi.estimate_rates"
      end
      # resource path
      local_var_path = '/v1/rates/estimate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(estimate_rates_request_body) 

      # return_type
      return_type = opts[:return_type] || 'Array<Rate>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatesApi#estimate_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Rate By ID
    # Retrieve a previously queried rate by its ID
    # @param rate_id [String] Rate ID
    # @param [Hash] opts the optional parameters
    # @return [GetRateByIdResponseBody]
    def get_rate_by_id(rate_id, opts = {})
      data, _status_code, _headers = get_rate_by_id_with_http_info(rate_id, opts)
      data
    end

    # Get Rate By ID
    # Retrieve a previously queried rate by its ID
    # @param rate_id [String] Rate ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRateByIdResponseBody, Integer, Hash)>] GetRateByIdResponseBody data, response status code and response headers
    def get_rate_by_id_with_http_info(rate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatesApi.get_rate_by_id ...'
      end
      # verify the required parameter 'rate_id' is set
      if @api_client.config.client_side_validation && rate_id.nil?
        fail ArgumentError, "Missing the required parameter 'rate_id' when calling RatesApi.get_rate_by_id"
      end
      if @api_client.config.client_side_validation && rate_id.to_s.length > 25
        fail ArgumentError, 'invalid value for "rate_id" when calling RatesApi.get_rate_by_id, the character length must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && rate_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "rate_id" when calling RatesApi.get_rate_by_id, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^se(-[a-z0-9]+)+$/)
      if @api_client.config.client_side_validation && rate_id !~ pattern
        fail ArgumentError, "invalid value for 'rate_id' when calling RatesApi.get_rate_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v1/rates/{rate_id}'.sub('{' + 'rate_id' + '}', CGI.escape(rate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GetRateByIdResponseBody' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatesApi#get_rate_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
