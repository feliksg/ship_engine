=begin
#ShipEngine API

#ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics. Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

The version of the OpenAPI document: 1.1.202006302006
Contact: sales@shipengine.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module ShipEngine
  class CarriersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Funds To Carrier
    # Add Funds To A Carrier
    # @param carrier_id [String] Carrier ID
    # @param add_funds_to_carrier_request_body [AddFundsToCarrierRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [AddFundsToCarrierResponseBody]
    def add_funds_to_carrier(carrier_id, add_funds_to_carrier_request_body, opts = {})
      data, _status_code, _headers = add_funds_to_carrier_with_http_info(carrier_id, add_funds_to_carrier_request_body, opts)
      data
    end

    # Add Funds To Carrier
    # Add Funds To A Carrier
    # @param carrier_id [String] Carrier ID
    # @param add_funds_to_carrier_request_body [AddFundsToCarrierRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddFundsToCarrierResponseBody, Integer, Hash)>] AddFundsToCarrierResponseBody data, response status code and response headers
    def add_funds_to_carrier_with_http_info(carrier_id, add_funds_to_carrier_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CarriersApi.add_funds_to_carrier ...'
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarriersApi.add_funds_to_carrier"
      end
      if @api_client.config.client_side_validation && carrier_id.to_s.length > 25
        fail ArgumentError, 'invalid value for "carrier_id" when calling CarriersApi.add_funds_to_carrier, the character length must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && carrier_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "carrier_id" when calling CarriersApi.add_funds_to_carrier, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^se(-[a-z0-9]+)+$/)
      if @api_client.config.client_side_validation && carrier_id !~ pattern
        fail ArgumentError, "invalid value for 'carrier_id' when calling CarriersApi.add_funds_to_carrier, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'add_funds_to_carrier_request_body' is set
      if @api_client.config.client_side_validation && add_funds_to_carrier_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_funds_to_carrier_request_body' when calling CarriersApi.add_funds_to_carrier"
      end
      # resource path
      local_var_path = '/v1/carriers/{carrier_id}/add_funds'.sub('{' + 'carrier_id' + '}', CGI.escape(carrier_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(add_funds_to_carrier_request_body) 

      # return_type
      return_type = opts[:return_type] || 'AddFundsToCarrierResponseBody' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarriersApi#add_funds_to_carrier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Carrier By ID
    # Retrive carrier info by ID
    # @param carrier_id [String] Carrier ID
    # @param [Hash] opts the optional parameters
    # @return [GetCarrierByIdResponseBody]
    def get_carrier_by_id(carrier_id, opts = {})
      data, _status_code, _headers = get_carrier_by_id_with_http_info(carrier_id, opts)
      data
    end

    # Get Carrier By ID
    # Retrive carrier info by ID
    # @param carrier_id [String] Carrier ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCarrierByIdResponseBody, Integer, Hash)>] GetCarrierByIdResponseBody data, response status code and response headers
    def get_carrier_by_id_with_http_info(carrier_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CarriersApi.get_carrier_by_id ...'
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarriersApi.get_carrier_by_id"
      end
      if @api_client.config.client_side_validation && carrier_id.to_s.length > 25
        fail ArgumentError, 'invalid value for "carrier_id" when calling CarriersApi.get_carrier_by_id, the character length must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && carrier_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "carrier_id" when calling CarriersApi.get_carrier_by_id, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^se(-[a-z0-9]+)+$/)
      if @api_client.config.client_side_validation && carrier_id !~ pattern
        fail ArgumentError, "invalid value for 'carrier_id' when calling CarriersApi.get_carrier_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v1/carriers/{carrier_id}'.sub('{' + 'carrier_id' + '}', CGI.escape(carrier_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GetCarrierByIdResponseBody' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarriersApi#get_carrier_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Carrier Options
    # Get a list of the options available for the carrier
    # @param carrier_id [String] Carrier ID
    # @param [Hash] opts the optional parameters
    # @return [GetCarrierOptionsResponseBody]
    def get_carrier_options(carrier_id, opts = {})
      data, _status_code, _headers = get_carrier_options_with_http_info(carrier_id, opts)
      data
    end

    # Get Carrier Options
    # Get a list of the options available for the carrier
    # @param carrier_id [String] Carrier ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCarrierOptionsResponseBody, Integer, Hash)>] GetCarrierOptionsResponseBody data, response status code and response headers
    def get_carrier_options_with_http_info(carrier_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CarriersApi.get_carrier_options ...'
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarriersApi.get_carrier_options"
      end
      if @api_client.config.client_side_validation && carrier_id.to_s.length > 25
        fail ArgumentError, 'invalid value for "carrier_id" when calling CarriersApi.get_carrier_options, the character length must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && carrier_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "carrier_id" when calling CarriersApi.get_carrier_options, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^se(-[a-z0-9]+)+$/)
      if @api_client.config.client_side_validation && carrier_id !~ pattern
        fail ArgumentError, "invalid value for 'carrier_id' when calling CarriersApi.get_carrier_options, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v1/carriers/{carrier_id}/options'.sub('{' + 'carrier_id' + '}', CGI.escape(carrier_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GetCarrierOptionsResponseBody' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarriersApi#get_carrier_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Carrier Package Types
    # List the package types associated with the carrier
    # @param carrier_id [String] Carrier ID
    # @param [Hash] opts the optional parameters
    # @return [ListCarrierPackageTypesResponseBody]
    def list_carrier_package_types(carrier_id, opts = {})
      data, _status_code, _headers = list_carrier_package_types_with_http_info(carrier_id, opts)
      data
    end

    # List Carrier Package Types
    # List the package types associated with the carrier
    # @param carrier_id [String] Carrier ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCarrierPackageTypesResponseBody, Integer, Hash)>] ListCarrierPackageTypesResponseBody data, response status code and response headers
    def list_carrier_package_types_with_http_info(carrier_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CarriersApi.list_carrier_package_types ...'
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarriersApi.list_carrier_package_types"
      end
      if @api_client.config.client_side_validation && carrier_id.to_s.length > 25
        fail ArgumentError, 'invalid value for "carrier_id" when calling CarriersApi.list_carrier_package_types, the character length must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && carrier_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "carrier_id" when calling CarriersApi.list_carrier_package_types, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^se(-[a-z0-9]+)+$/)
      if @api_client.config.client_side_validation && carrier_id !~ pattern
        fail ArgumentError, "invalid value for 'carrier_id' when calling CarriersApi.list_carrier_package_types, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v1/carriers/{carrier_id}/packages'.sub('{' + 'carrier_id' + '}', CGI.escape(carrier_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ListCarrierPackageTypesResponseBody' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarriersApi#list_carrier_package_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Carrier Services
    # List the services associated with the carrier ID
    # @param carrier_id [String] Carrier ID
    # @param [Hash] opts the optional parameters
    # @return [ListCarrierServicesResponseBody]
    def list_carrier_services(carrier_id, opts = {})
      data, _status_code, _headers = list_carrier_services_with_http_info(carrier_id, opts)
      data
    end

    # List Carrier Services
    # List the services associated with the carrier ID
    # @param carrier_id [String] Carrier ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCarrierServicesResponseBody, Integer, Hash)>] ListCarrierServicesResponseBody data, response status code and response headers
    def list_carrier_services_with_http_info(carrier_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CarriersApi.list_carrier_services ...'
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarriersApi.list_carrier_services"
      end
      if @api_client.config.client_side_validation && carrier_id.to_s.length > 25
        fail ArgumentError, 'invalid value for "carrier_id" when calling CarriersApi.list_carrier_services, the character length must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && carrier_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "carrier_id" when calling CarriersApi.list_carrier_services, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^se(-[a-z0-9]+)+$/)
      if @api_client.config.client_side_validation && carrier_id !~ pattern
        fail ArgumentError, "invalid value for 'carrier_id' when calling CarriersApi.list_carrier_services, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v1/carriers/{carrier_id}/services'.sub('{' + 'carrier_id' + '}', CGI.escape(carrier_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ListCarrierServicesResponseBody' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarriersApi#list_carrier_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Carriers
    # List all carriers that have been added to this account
    # @param [Hash] opts the optional parameters
    # @return [GetCarriersResponseBody]
    def list_carriers(opts = {})
      data, _status_code, _headers = list_carriers_with_http_info(opts)
      data
    end

    # List Carriers
    # List all carriers that have been added to this account
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCarriersResponseBody, Integer, Hash)>] GetCarriersResponseBody data, response status code and response headers
    def list_carriers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CarriersApi.list_carriers ...'
      end
      # resource path
      local_var_path = '/v1/carriers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GetCarriersResponseBody' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarriersApi#list_carriers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
