=begin
#ShipEngine API

#ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics. Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

The version of the OpenAPI document: 1.1.202006302006
Contact: sales@shipengine.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module ShipEngine
  class WarehousesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Warehouse
    # Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
    # @param create_warehouse_request_body [CreateWarehouseRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [CreateWarehouseResponseBody]
    def create_warehouse(create_warehouse_request_body, opts = {})
      data, _status_code, _headers = create_warehouse_with_http_info(create_warehouse_request_body, opts)
      data
    end

    # Create Warehouse
    # Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
    # @param create_warehouse_request_body [CreateWarehouseRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateWarehouseResponseBody, Integer, Hash)>] CreateWarehouseResponseBody data, response status code and response headers
    def create_warehouse_with_http_info(create_warehouse_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WarehousesApi.create_warehouse ...'
      end
      # verify the required parameter 'create_warehouse_request_body' is set
      if @api_client.config.client_side_validation && create_warehouse_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_warehouse_request_body' when calling WarehousesApi.create_warehouse"
      end
      # resource path
      local_var_path = '/v1/warehouses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_warehouse_request_body) 

      # return_type
      return_type = opts[:return_type] || 'CreateWarehouseResponseBody' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WarehousesApi#create_warehouse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Warehouse By ID
    # Delete a warehouse by ID
    # @param warehouse_id [String] Warehouse ID
    # @param [Hash] opts the optional parameters
    # @return [String]
    def delete_warehouse(warehouse_id, opts = {})
      data, _status_code, _headers = delete_warehouse_with_http_info(warehouse_id, opts)
      data
    end

    # Delete Warehouse By ID
    # Delete a warehouse by ID
    # @param warehouse_id [String] Warehouse ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def delete_warehouse_with_http_info(warehouse_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WarehousesApi.delete_warehouse ...'
      end
      # verify the required parameter 'warehouse_id' is set
      if @api_client.config.client_side_validation && warehouse_id.nil?
        fail ArgumentError, "Missing the required parameter 'warehouse_id' when calling WarehousesApi.delete_warehouse"
      end
      if @api_client.config.client_side_validation && warehouse_id.to_s.length > 25
        fail ArgumentError, 'invalid value for "warehouse_id" when calling WarehousesApi.delete_warehouse, the character length must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && warehouse_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "warehouse_id" when calling WarehousesApi.delete_warehouse, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^se(-[a-z0-9]+)+$/)
      if @api_client.config.client_side_validation && warehouse_id !~ pattern
        fail ArgumentError, "invalid value for 'warehouse_id' when calling WarehousesApi.delete_warehouse, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v1/warehouses/{warehouse_id}'.sub('{' + 'warehouse_id' + '}', CGI.escape(warehouse_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WarehousesApi#delete_warehouse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Warehouse By Id
    # Retrieve warehouse data based on the warehouse ID
    # @param warehouse_id [String] Warehouse ID
    # @param [Hash] opts the optional parameters
    # @return [GetWarehouseByIdResponseBody]
    def get_warehouse_by_id(warehouse_id, opts = {})
      data, _status_code, _headers = get_warehouse_by_id_with_http_info(warehouse_id, opts)
      data
    end

    # Get Warehouse By Id
    # Retrieve warehouse data based on the warehouse ID
    # @param warehouse_id [String] Warehouse ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetWarehouseByIdResponseBody, Integer, Hash)>] GetWarehouseByIdResponseBody data, response status code and response headers
    def get_warehouse_by_id_with_http_info(warehouse_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WarehousesApi.get_warehouse_by_id ...'
      end
      # verify the required parameter 'warehouse_id' is set
      if @api_client.config.client_side_validation && warehouse_id.nil?
        fail ArgumentError, "Missing the required parameter 'warehouse_id' when calling WarehousesApi.get_warehouse_by_id"
      end
      if @api_client.config.client_side_validation && warehouse_id.to_s.length > 25
        fail ArgumentError, 'invalid value for "warehouse_id" when calling WarehousesApi.get_warehouse_by_id, the character length must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && warehouse_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "warehouse_id" when calling WarehousesApi.get_warehouse_by_id, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^se(-[a-z0-9]+)+$/)
      if @api_client.config.client_side_validation && warehouse_id !~ pattern
        fail ArgumentError, "invalid value for 'warehouse_id' when calling WarehousesApi.get_warehouse_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v1/warehouses/{warehouse_id}'.sub('{' + 'warehouse_id' + '}', CGI.escape(warehouse_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GetWarehouseByIdResponseBody' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WarehousesApi#get_warehouse_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Warehouses
    # Retrieve a list of warehouses associated with this account.
    # @param [Hash] opts the optional parameters
    # @return [ListWarehousesResponseBody]
    def list_warehouses(opts = {})
      data, _status_code, _headers = list_warehouses_with_http_info(opts)
      data
    end

    # List Warehouses
    # Retrieve a list of warehouses associated with this account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListWarehousesResponseBody, Integer, Hash)>] ListWarehousesResponseBody data, response status code and response headers
    def list_warehouses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WarehousesApi.list_warehouses ...'
      end
      # resource path
      local_var_path = '/v1/warehouses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ListWarehousesResponseBody' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WarehousesApi#list_warehouses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update WareHouse By Id
    # Update Warehouse object information
    # @param warehouse_id [String] Warehouse ID
    # @param update_warehouse_request_body [UpdateWarehouseRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def update_warehouse(warehouse_id, update_warehouse_request_body, opts = {})
      data, _status_code, _headers = update_warehouse_with_http_info(warehouse_id, update_warehouse_request_body, opts)
      data
    end

    # Update WareHouse By Id
    # Update Warehouse object information
    # @param warehouse_id [String] Warehouse ID
    # @param update_warehouse_request_body [UpdateWarehouseRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def update_warehouse_with_http_info(warehouse_id, update_warehouse_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WarehousesApi.update_warehouse ...'
      end
      # verify the required parameter 'warehouse_id' is set
      if @api_client.config.client_side_validation && warehouse_id.nil?
        fail ArgumentError, "Missing the required parameter 'warehouse_id' when calling WarehousesApi.update_warehouse"
      end
      if @api_client.config.client_side_validation && warehouse_id.to_s.length > 25
        fail ArgumentError, 'invalid value for "warehouse_id" when calling WarehousesApi.update_warehouse, the character length must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && warehouse_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "warehouse_id" when calling WarehousesApi.update_warehouse, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^se(-[a-z0-9]+)+$/)
      if @api_client.config.client_side_validation && warehouse_id !~ pattern
        fail ArgumentError, "invalid value for 'warehouse_id' when calling WarehousesApi.update_warehouse, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'update_warehouse_request_body' is set
      if @api_client.config.client_side_validation && update_warehouse_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_warehouse_request_body' when calling WarehousesApi.update_warehouse"
      end
      # resource path
      local_var_path = '/v1/warehouses/{warehouse_id}'.sub('{' + 'warehouse_id' + '}', CGI.escape(warehouse_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(update_warehouse_request_body) 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WarehousesApi#update_warehouse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
