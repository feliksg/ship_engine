=begin
#ShipEngine API

#ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics. Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

The version of the OpenAPI document: 1.1.202006302006
Contact: sales@shipengine.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module ShipEngine
  # A rate shipment response body
  class CalculateRatesResponseBody
    # A string that uniquely identifies the shipment
    attr_accessor :shipment_id

    # The carrier account that is billed for the shipping charges
    attr_accessor :carrier_id

    # The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc. 
    attr_accessor :service_code

    # ID that the Order Source assigned
    attr_accessor :external_order_id

    # Describe the packages included in this shipment as related to potential metadata that was imported from external order sources 
    attr_accessor :items

    # You can optionally use this field to store your own identifier for this shipment.  > **Warning:** The `external_shipment_id` is limited to 50 characters. Any additional characters will be truncated. 
    attr_accessor :external_shipment_id

    # The date that the shipment was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead. 
    attr_accessor :ship_date

    # The date and time that the shipment was created in ShipEngine.
    attr_accessor :created_at

    # The date and time that the shipment was created or last modified.
    attr_accessor :modified_at

    # The current status of the shipment
    attr_accessor :shipment_status

    # The recipient's mailing address
    attr_accessor :ship_to

    # The shipment's origin address. If you frequently ship from the same location, consider [creating a warehouse](https://www.shipengine.com/docs/reference/create-warehouse/). Then you can simply specify the `warehouse_id` rather than the complete address each time. 
    attr_accessor :ship_from

    # The [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) that the shipment is being shipped from.  Either `warehouse_id` or `ship_from` must be specified. 
    attr_accessor :warehouse_id

    # The return address for this shipment.  Defaults to the `ship_from` address. 
    attr_accessor :return_to

    # The type of delivery confirmation that is required for this shipment.
    attr_accessor :confirmation

    # Customs information.  This is usually only needed for international shipments. 
    attr_accessor :customs

    # Advanced shipment options.  These are entirely optional.
    attr_accessor :advanced_options

    # The insurance provider to use for any insured packages in the shipment. 
    attr_accessor :insurance_provider

    # Arbitrary tags associated with this shipment.  Tags can be used to categorize shipments, and shipments can be queried by their tags. 
    attr_accessor :tags

    attr_accessor :order_source_code

    # The packages in the shipment.  > **Note:** Some carriers only allow one package per shipment.  If you attempt to create a multi-package shipment for a carrier that doesn't allow it, an error will be returned. 
    attr_accessor :packages

    # The combined weight of all packages in the shipment
    attr_accessor :total_weight

    # The rates response
    attr_accessor :rate_response

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'shipment_id' => :'shipment_id',
        :'carrier_id' => :'carrier_id',
        :'service_code' => :'service_code',
        :'external_order_id' => :'external_order_id',
        :'items' => :'items',
        :'external_shipment_id' => :'external_shipment_id',
        :'ship_date' => :'ship_date',
        :'created_at' => :'created_at',
        :'modified_at' => :'modified_at',
        :'shipment_status' => :'shipment_status',
        :'ship_to' => :'ship_to',
        :'ship_from' => :'ship_from',
        :'warehouse_id' => :'warehouse_id',
        :'return_to' => :'return_to',
        :'confirmation' => :'confirmation',
        :'customs' => :'customs',
        :'advanced_options' => :'advanced_options',
        :'insurance_provider' => :'insurance_provider',
        :'tags' => :'tags',
        :'order_source_code' => :'order_source_code',
        :'packages' => :'packages',
        :'total_weight' => :'total_weight',
        :'rate_response' => :'rate_response'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'shipment_id' => :'String',
        :'carrier_id' => :'String',
        :'service_code' => :'String',
        :'external_order_id' => :'String',
        :'items' => :'Array<ShipmentItem>',
        :'external_shipment_id' => :'String',
        :'ship_date' => :'DateTime',
        :'created_at' => :'DateTime',
        :'modified_at' => :'DateTime',
        :'shipment_status' => :'ShipmentStatus',
        :'ship_to' => :'Address',
        :'ship_from' => :'Address',
        :'warehouse_id' => :'String',
        :'return_to' => :'Address',
        :'confirmation' => :'DeliveryConfirmation',
        :'customs' => :'InternationalShipmentOptions',
        :'advanced_options' => :'AdvancedShipmentOptions',
        :'insurance_provider' => :'InsuranceProvider',
        :'tags' => :'Array<Tag>',
        :'order_source_code' => :'OrderSourceName',
        :'packages' => :'Array<Package>',
        :'total_weight' => :'Weight',
        :'rate_response' => :'RatesInformation'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'external_order_id',
        :'external_shipment_id',
        :'warehouse_id',
        :'customs',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'PartialShipment',
      :'RateResponse'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ShipEngine::CalculateRatesResponseBody` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ShipEngine::CalculateRatesResponseBody`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'shipment_id')
        self.shipment_id = attributes[:'shipment_id']
      end

      if attributes.key?(:'carrier_id')
        self.carrier_id = attributes[:'carrier_id']
      end

      if attributes.key?(:'service_code')
        self.service_code = attributes[:'service_code']
      end

      if attributes.key?(:'external_order_id')
        self.external_order_id = attributes[:'external_order_id']
      end

      if attributes.key?(:'items')
        if (value = attributes[:'items']).is_a?(Array)
          self.items = value
        end
      end

      if attributes.key?(:'external_shipment_id')
        self.external_shipment_id = attributes[:'external_shipment_id']
      end

      if attributes.key?(:'ship_date')
        self.ship_date = attributes[:'ship_date']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'modified_at')
        self.modified_at = attributes[:'modified_at']
      end

      if attributes.key?(:'shipment_status')
        self.shipment_status = attributes[:'shipment_status']
      end

      if attributes.key?(:'ship_to')
        self.ship_to = attributes[:'ship_to']
      end

      if attributes.key?(:'ship_from')
        self.ship_from = attributes[:'ship_from']
      end

      if attributes.key?(:'warehouse_id')
        self.warehouse_id = attributes[:'warehouse_id']
      end

      if attributes.key?(:'return_to')
        self.return_to = attributes[:'return_to']
      end

      if attributes.key?(:'confirmation')
        self.confirmation = attributes[:'confirmation']
      end

      if attributes.key?(:'customs')
        self.customs = attributes[:'customs']
      end

      if attributes.key?(:'advanced_options')
        self.advanced_options = attributes[:'advanced_options']
      end

      if attributes.key?(:'insurance_provider')
        self.insurance_provider = attributes[:'insurance_provider']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'order_source_code')
        self.order_source_code = attributes[:'order_source_code']
      end

      if attributes.key?(:'packages')
        if (value = attributes[:'packages']).is_a?(Array)
          self.packages = value
        end
      end

      if attributes.key?(:'total_weight')
        self.total_weight = attributes[:'total_weight']
      end

      if attributes.key?(:'rate_response')
        self.rate_response = attributes[:'rate_response']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @shipment_id.nil?
        invalid_properties.push('invalid value for "shipment_id", shipment_id cannot be nil.')
      end

      if !@external_shipment_id.nil? && @external_shipment_id.to_s.length > 50
        invalid_properties.push('invalid value for "external_shipment_id", the character length must be smaller than or equal to 50.')
      end

      if @ship_date.nil?
        invalid_properties.push('invalid value for "ship_date", ship_date cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @modified_at.nil?
        invalid_properties.push('invalid value for "modified_at", modified_at cannot be nil.')
      end

      if @shipment_status.nil?
        invalid_properties.push('invalid value for "shipment_status", shipment_status cannot be nil.')
      end

      if @return_to.nil?
        invalid_properties.push('invalid value for "return_to", return_to cannot be nil.')
      end

      if @confirmation.nil?
        invalid_properties.push('invalid value for "confirmation", confirmation cannot be nil.')
      end

      if @advanced_options.nil?
        invalid_properties.push('invalid value for "advanced_options", advanced_options cannot be nil.')
      end

      if @insurance_provider.nil?
        invalid_properties.push('invalid value for "insurance_provider", insurance_provider cannot be nil.')
      end

      if @tags.nil?
        invalid_properties.push('invalid value for "tags", tags cannot be nil.')
      end

      if @packages.nil?
        invalid_properties.push('invalid value for "packages", packages cannot be nil.')
      end

      if @total_weight.nil?
        invalid_properties.push('invalid value for "total_weight", total_weight cannot be nil.')
      end

      if @rate_response.nil?
        invalid_properties.push('invalid value for "rate_response", rate_response cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @shipment_id.nil?
      return false if !@external_shipment_id.nil? && @external_shipment_id.to_s.length > 50
      return false if @ship_date.nil?
      return false if @created_at.nil?
      return false if @modified_at.nil?
      return false if @shipment_status.nil?
      return false if @return_to.nil?
      return false if @confirmation.nil?
      return false if @advanced_options.nil?
      return false if @insurance_provider.nil?
      return false if @tags.nil?
      return false if @packages.nil?
      return false if @total_weight.nil?
      return false if @rate_response.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] external_shipment_id Value to be assigned
    def external_shipment_id=(external_shipment_id)
      if !external_shipment_id.nil? && external_shipment_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "external_shipment_id", the character length must be smaller than or equal to 50.'
      end

      @external_shipment_id = external_shipment_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          shipment_id == o.shipment_id &&
          carrier_id == o.carrier_id &&
          service_code == o.service_code &&
          external_order_id == o.external_order_id &&
          items == o.items &&
          external_shipment_id == o.external_shipment_id &&
          ship_date == o.ship_date &&
          created_at == o.created_at &&
          modified_at == o.modified_at &&
          shipment_status == o.shipment_status &&
          ship_to == o.ship_to &&
          ship_from == o.ship_from &&
          warehouse_id == o.warehouse_id &&
          return_to == o.return_to &&
          confirmation == o.confirmation &&
          customs == o.customs &&
          advanced_options == o.advanced_options &&
          insurance_provider == o.insurance_provider &&
          tags == o.tags &&
          order_source_code == o.order_source_code &&
          packages == o.packages &&
          total_weight == o.total_weight &&
          rate_response == o.rate_response
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [shipment_id, carrier_id, service_code, external_order_id, items, external_shipment_id, ship_date, created_at, modified_at, shipment_status, ship_to, ship_from, warehouse_id, return_to, confirmation, customs, advanced_options, insurance_provider, tags, order_source_code, packages, total_weight, rate_response].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        ShipEngine.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
